<launch>
  <arg name="rostimenow" default="false"/>
  <arg name="use_gazebo" default="false"/>
  <arg name="amiroNr" default="1"/>
  <arg name="markerId" default="1"/>
  <arg name="laserscan" default="0"/>
  <arg name="laserscan_sick" default="0"/>
  <arg name="laserscan_hokuyo" default="0"/>
  <arg name="camera" default="0"/>
  <arg name="twb" default="0"/>
  <arg name="teleop" default="0"/>
  <arg name="nav_stack" default="0"/>
  <arg name="robot_localization" default="0"/>
  <arg name="hector_mapping" default="0"/>
  <arg name="dynamic_tf_with_odom" default="0"/>
  <arg name="dynamic_tf_with_ekf" default="0"/>
  <arg name="static_tf_map_odom" default="0"/>
  <arg name="frontier_exploration" default="0"/>
  <arg name="no_static_map" default="0"/>
  <arg name="octomap" default="0"/>
  <arg name="gmapping" default="0"/>

  <group unless="$(arg use_gazebo)">
    <!-- ################################################# -->
    <!-- rsb_to_ros_bridge -->
    <!-- ################################################# -->

    <group if="$(arg camera)">
      <node name="rst_vision_image_to_ros_sensormsgs_image$(arg amiroNr)" pkg="rsb_to_ros_bridge" type="rst_vision_image_to_ros_sensormsgs_image" respawn="false" output="screen" cwd="ROS_HOME" clear_params="true">
        <param name="rsb_listener_scope" value="amiro$(arg amiroNr)/image/depth"/>
        <param name="ros_publish_image_topic" value="amiro/$(arg amiroNr)/image"/>
        <param name="ros_publish_Compressed_image_topic" value="amiro$(arg amiroNr)/image/compressed"/>
        <param name="image_compression_format" value="jpg"/>
        <param name="rostimenow" value="$(arg rostimenow)"/>
      </node>
    </group>
    <group if="$(arg twb)">
      <node name="rsb_twb_to_ros_navmsgs_odometry$(arg amiroNr)" pkg="rsb_to_ros_bridge" type="rsb_twb_to_ros_navmsgs_odometry" respawn="false" output="screen" cwd="ROS_HOME" clear_params="true">
        <param name="rsb_listener_scope" value="/tracking/merger"/>
        <param name="ros_publish_topic" value="/tracking/$(arg markerId)"/>
        <param name="marker_id" value="$(arg markerId)"/>
        <param name="rostimenow" value="$(arg rostimenow)"/>
      </node>
    </group>

    <node name="rst_pose_to_ros_navmsgs_odometry$(arg amiroNr)" pkg="rsb_to_ros_bridge" type="rst_pose_to_ros_navmsgs_odometry" respawn="false" output="screen" cwd="ROS_HOME" clear_params="true">
      <param name="rsb_listener_scope" value="/amiro$(arg amiroNr)/pose"/>
      <param name="ros_publish_topic" value="/amiro$(arg amiroNr)/odom"/>
      <param name="rostimenow" value="$(arg rostimenow)"/>
    </node>
    <!-- rst_pose_to_ros_posestamped is depricated! rst_pose_to_ros_navmsgs_odometry is a better version -->
    <!-- <node name="rst_pose_to_ros_posestamped$(arg amiroNr)" pkg="rsb_to_ros_bridge" type="rst_pose_to_ros_posestamped" respawn="false" output="screen" cwd="ROS_HOME" clear_params="true">
      <param name="rsb_listener_scope" value="/pose"/>
      <param name="ros_publish_topic" value="/pose"/>
      <param name="rostimenow" value="$(arg rostimenow)"/>
    </node> -->
    <!-- <node name="rst_value_array_to_ros_int_array" pkg="rsb_to_ros_bridge" type="rst_value_array_to_ros_int_array" respawn="false" output="screen" cwd="ROS_HOME" clear_params="true">
      <param name="rsb_listener_scope" value="/rir_prox/original"/>
      <param name="ros_publish_topic" value="/rir_prox"/>
      <param name="rostimenow" value="$(arg rostimenow)"/>
    </node> -->
    <group if="$(arg laserscan)">
      <node name="rst_vision_laserscan_to_ros_sensormsgs_Laserscan$(arg amiroNr)" pkg="rsb_to_ros_bridge" type="rst_vision_laserscan_to_ros_sensormsgs_Laserscan" respawn="false" output="screen" cwd="ROS_HOME" clear_params="true">
        <param name="rsb_listener_scope" value="/amiro$(arg amiroNr)/laserscan"/>
        <param name="ros_publish_topic" value="/amiro$(arg amiroNr)/laserscan"/>
        <param name="offset_scan" value="-2.35619" if="$(arg laserscan_sick)"/>
        <param name="offset_scan" value="-2.0944" if="$(arg laserscan_hokuyo)"/>
        <param name="rostimenow" value="$(arg rostimenow)"/>
      </node>
    </group>

    <!-- ################################################# -->
    <!-- ros_to_rsb_bridge -->
    <!-- ################################################# -->

    <!-- <node name="ros_geometry_msgs_posestamped_to_rst_geometry_pose$(arg amiroNr)" pkg="ros_to_rsb_bridge" type="ros_geometry_msgs_posestamped_to_rst_geometry_pose" respawn="false" output="screen" cwd="ROS_HOME" clear_params="true">
      <param name="ros_listener_topic" value="amiro$(arg amiroNr)/pose"/>
      <param name="rsb_publish_scope" value="amiro$(arg amiroNr)/pose"/>
    </node> -->
    <group if="$(arg teleop)">
      <node name="vel_cmd_bridge$(arg amiroNr)" pkg="ros_to_rsb_bridge" type="ros_geometry_msgs_twist_to_rst_value_array" respawn="false" output="screen" cwd="ROS_HOME">
        <param name="ros_listener_topic" value="/amiro$(arg amiroNr)/cmd_vel"/>
        <param name="rsb_publish_scope" value="/amiro$(arg amiroNr)/motor/5"/>
      </node>
    </group>

    <group if="$(arg nav_stack)">
      <node name="Navstack_controll_bridge$(arg amiroNr)" pkg="ros_to_rsb_bridge" type="ros_geometry_msgs_twist_to_rst_value_array" respawn="false" output="screen" cwd="ROS_HOME" clear_params="true">
        <param name="ros_listener_topic" value="/amiro$(arg amiroNr)/cmd_vel"/>
        <param name="rsb_publish_scope" value="/amiro$(arg amiroNr)/motor/10"/>
      </node>
    </group>
    <!-- <node name="ros_int_multiarray_rst_value_array" pkg="ros_to_rsb_bridge" type="ros_int_multiarray_rst_value_array" respawn="false" output="screen" cwd="ROS_HOME" clear_params="true">
      <param name="ros_listener_topic" value="/motor"/>
      <param name="rsb_publish_scope" value="/motor/10"/>
    </node> -->
  </group>

  <!-- ################################################# -->
  <!-- TRANSFORMS -->
  <!-- ################################################# -->
  
  <!-- <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="x y z qx qy qz qw frame_id child_frame_id  period_in_ms" /> -->
  <group if="$(arg static_tf_map_odom)">
    <node pkg="tf" type="static_transform_publisher" name="amiro$(arg amiroNr)_map_odom" args="0 0 0 0 0 0 1 map amiro$(arg amiroNr)/odom 100"/>
  </group>

  <group if="$(arg dynamic_tf_with_odom)">
    <node pkg="amiro_slam" type="dynamic_tf_with_odom" name="amiro$(arg amiroNr)_odom_base_link">
      <param name="ros_listener_odom_topic" value="/amiro$(arg amiroNr)/odom"/>
      <param name="parent_frame" value="amiro$(arg amiroNr)/odom"/>
      <param name="child_frame" value="amiro$(arg amiroNr)/base_link"/>
    </node>
  </group>
  <group if="$(arg dynamic_tf_with_ekf)">
    <node pkg="dynamic_transform" type="dynamic_tf_with_odom" name="amiro$(arg amiroNr)_odom_base_link">
      <param name="ros_listener_odom_topic" value="/amiro$(arg amiroNr)/ekf"/>
      <param name="parent_frame" value="amiro$(arg amiroNr)/odom"/>
      <param name="child_frame" value="amiro$(arg amiroNr)/base_link"/>
    </node>
  </group>
  <node pkg="tf" type="static_transform_publisher" name="amiro$(arg amiroNr)_base_link_base_laser" args="0 0 0.167 0 0 0 amiro$(arg amiroNr)/base_link amiro$(arg amiroNr)/base_laser 100"/>

  <!-- ################################################# -->
  <!-- ROBOT LOCALIZATION -->
  <!-- ################################################# -->

  <group if="$(arg robot_localization)">
    <node pkg="robot_localization" type="ekf_localization_node" name="amiro$(arg amiroNr)_odom_twb_ekf" clear_params="true">
      <param name="frequency" value="20"/>
      <param name="map_frame" value="map"/>
      <param name="odom_frame" value="amiro$(arg amiroNr)/odom"/>
      <param name="base_link_frame" value="amiro$(arg amiroNr)/base_link"/>

      <remap from="odometry/filtered" to="/amiro$(arg amiroNr)/ekf"/>
      <param name="two_d_mode" value="true"/>
      <param name="publish_tf" value="true"/>
      <!-- <param name="publish_tf" value="false"/> -->
      <param name="print_diagnostics" value="true"/>

      <!-- values is x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. -->
      <param name="odom0" value="amiro$(arg amiroNr)/odom"/>
      <rosparam param="odom0_config">[true, true, false, false, false, true, false, false, false, false, false, false, false, false, false]</rosparam>
      <param name="odom0_differential" value="true"/>
      <param name="odom0_relative" value="true"/>

      <param name="odom1" value="/tracking/$(arg markerId)"/>
      <rosparam param="odom1_config">[true, true, false, false, false, true, false, false, false, false, false, false, false, false, false]</rosparam>
      <param name="odom1_differential" value="false"/>
      <param name="odom1_relative" value="false"/>
    </node>
  </group>

  <!-- ################################################# -->
  <!-- ROS NAVIGATION STACK -->
  <!-- ################################################# -->

  <group if="$(arg nav_stack)">
    <include file="$(find amiro_2dnav)/move_base.launch">
      <arg name="amiroNr" value="$(arg amiroNr)"/>
      <arg name="no_static_map" value="$(arg no_static_map)"/>
    </include>
  </group>

  <!-- ################################################# -->
  <!-- HECTOR MAPPING -->
  <!-- ################################################# -->
  <group if="$(arg hector_mapping)">
    <node pkg="hector_mapping" type="hector_mapping" name="amiro$(arg amiroNr)_hector_mapping" clear_params="true">
      <param name="scan_topic" value="amiro$(arg amiroNr)/laserscan"/>

      <param name="map_frame" value="map"/>
      <param name="odom_frame" value="amiro$(arg amiroNr)/odom"/>
      <param name="base_frame" value="amiro$(arg amiroNr)/base_link"/>

      <param name="map_resolution" value="0.025"/>
      <param name="map_size" value="5000"/>

      <param name="pub_map_odom_transform" value="true"/>
      <param name="map_pub_period" value="0.1"/>
      <!-- <param name="laser_min_dist" value="0.01"/> -->
    </node>
  </group>

  <!-- ################################################# -->
  <!-- OCTOMAP -->
  <!-- ################################################# -->

  <group if="$(arg octomap)">
    <node pkg="mapping" type="ros_laser_scan_to_ros_pointcloud2" name="amiro$(arg amiroNr)_laser_to_point">
      <param name="laserscan_topic" value="/amiro$(arg amiroNr)/laserscan"/>
      <param name="pointcloud2_topic" value="/amiro$(arg amiroNr)/pointcloud2"/>
      <!-- <param name="target_frame" value="amiro1/base_laser"/> -->
    </node>
    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server$(arg amiroNr)">
      <param name="resolution" value="0.0500"/>
      <param name="max_sensor_range" value="5.0"/>
      <remap from="cloud_in" to="/amiro$(arg amiroNr)/pointcloud2"/>
    </node>
  </group>

  <!-- ################################################# -->
  <!-- GMAPPING -->
  <!-- ################################################# -->

  <group if="$(arg gmapping)">
    <node pkg="gmapping" type="slam_gmapping" name="gmapping_thing$(arg amiroNr)" output="screen" clear_params="true">
      <remap from="scan" to="/amiro$(arg amiroNr)/laserscan"/>
      <param name="base_frame" value="amiro$(arg amiroNr)/base_link"/>
      <param name="odom_frame" value="amiro$(arg amiroNr)/odom"/>
      <param name="map_update_interval" value="0.5"/>
      <!-- <param name="minimumScore" value="50"/> -->
      <param name="delta" value="0.025"/>
      <param name="minimumScore" value="0"/>
      <param name="particles" value="50"/>
      <param name="kernelSize" value="1"/>
    </node>
  </group>
  <!-- ################################################# -->
  <!-- FRONTIER EXPLORATION -->
  <!-- ################################################# -->

  <group if="$(arg frontier_exploration)">
    <node pkg="frontier_exploration" type="explore_client" name="amiro$(arg amiroNr)_explore_client" output="screen"/>
    <node pkg="frontier_exploration" type="explore_server" name="amiro$(arg amiroNr)_explore_server" output="screen">
      <param name="frequency" value="0.0"/>
      <!-- Should be less than sensor range -->
      <param name="goal_aliasing" value="1.5"/>
      <rosparam file="$(find amiro_2dnav)/costmap_common_params.yaml" command="load" ns="explore_costmap"/>
      <rosparam ns="explore_costmap" param="robot_base_frame" subst_value="True">amiro$(arg amiroNr)/base_link</rosparam>
      <rosparam ns="explore_costmap" param="obstacles_laser/laser" subst_value="True">{data_type: LaserScan, topic: /amiro$(arg amiroNr)/laserscan, marking: true, clearing: true, inf_is_valid: true}</rosparam>
      <rosparam file="$(find amiro_2dnav)/costmap_exploration.yaml" command="load" ns="explore_costmap"/>
    </node>
  </group>

</launch>
